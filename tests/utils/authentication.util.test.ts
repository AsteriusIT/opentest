import https from 'https';
import { BearerAuthStrategy, OAuth2AuthStrategy, createAuthStrategy, processAuthenticationHeader } from '../../src/utils/authentication.util';
import { AuthenticationOauth2Type } from '../../src/types/authentication.type';

// Mock the https module
jest.mock('https');

describe('BearerAuthStrategy', () => {
    it('should return a valid Bearer token', async () => {
        const token = 'test-token';
        const strategy = new BearerAuthStrategy(token);
        const header = await strategy.getAuthorizationHeader();
        expect(header).toBe(`Bearer ${token}`);
    });
});

describe('OAuth2AuthStrategy', () => {
    const mockAuthConfig: AuthenticationOauth2Type = {
        accessTokenUrl: 'https://example.com/token',
        clientId: 'client-id',
        clientSecret: 'client-secret',
        grantType: 'client_credentials',
        scope: 'test-scope'
    };

    it('should fetch and return a valid access token', async () => {
        const mockResponse = {
            on: jest.fn().mockImplementation((event, callback) => {
                if (event === 'data') {
                    callback(JSON.stringify({ access_token: 'test-access-token' }));
                }
                if (event === 'end') {
                    callback();
                }
            })
        };

        const mockRequest = {
            write: jest.fn(),
            end: jest.fn()
        };

        (https.request as jest.Mock).mockImplementation((options, callback) => {
            callback(mockResponse);
            return mockRequest;
        });

        const strategy = new OAuth2AuthStrategy(mockAuthConfig);
        const header = await strategy.getAuthorizationHeader();

        expect(header).toBe('Bearer test-access-token');
        expect(https.request).toHaveBeenCalled();
        expect(mockRequest.write).toHaveBeenCalled();
        expect(mockRequest.end).toHaveBeenCalled();
    });

    it('should throw an error for invalid OAuth2 configuration', async () => {
        const invalidConfig = { ...mockAuthConfig, clientId: undefined };
        const strategy = new OAuth2AuthStrategy(invalidConfig);

        await expect(strategy.getAuthorizationHeader()).rejects.toThrow();
    });
});

describe('createAuthStrategy', () => {
    it('should create a BearerAuthStrategy', () => {
        const auth = { type: 'bearer', value: { raw: 'test-token' } };
        const strategy = createAuthStrategy(auth);
        expect(strategy).toBeInstanceOf(BearerAuthStrategy);
    });

    it('should create an OAuth2AuthStrategy', () => {
        const auth = { type: 'oauth2', value: {} };
        const strategy = createAuthStrategy(auth);
        expect(strategy).toBeInstanceOf(OAuth2AuthStrategy);
    });

    it('should throw an error for unsupported authentication type', () => {
        const auth = { type: 'unsupported', value: {} };
        expect(() => createAuthStrategy(auth)).toThrow('Unsupported authentication type: unsupported');
    });
});

describe('processAuthenticationHeader', () => {
    it('should return an empty object for undefined authentication', async () => {
        const result = await processAuthenticationHeader(undefined);
        expect(result).toEqual({});
    });

    it('should process bearer authentication', async () => {
        const auth = { type: 'bearer', value: { raw: 'test-token' } };
        const result = await processAuthenticationHeader(auth);
        expect(result).toEqual({ Authorization: 'Bearer test-token' });
    });

    it('should process OAuth2 authentication', async () => {
        const mockAuthConfig = {
            accessTokenUrl: 'https://example.com/token',
            clientId: 'client-id',
            clientSecret: 'client-secret',
            grantType: 'client_credentials',
            scope: 'test-scope'
        };

        const auth = { type: 'oauth2', value: mockAuthConfig };

        // Mock the OAuth2AuthStrategy
        jest.spyOn(OAuth2AuthStrategy.prototype, 'getAuthorizationHeader').mockResolvedValue('Bearer test-oauth-token');

        const result = await processAuthenticationHeader(auth);
        expect(result).toEqual({ Authorization: 'Bearer test-oauth-token' });
    });
});
