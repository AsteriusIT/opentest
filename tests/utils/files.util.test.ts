import fs from "fs";
import { OpenAPIV3 } from "openapi-types";
import { TestFileType } from "../../src/types/testFile.type";
import { getOpenApiFile, getOpenApiTestFile } from '../../src/utils/files.util';

const validTestFileType: TestFileType = {
    tests: [
        {
            name: "find by available pets",
            description: "Should return all available pets",
            path: "/pet/findByStatus",
            method: "GET",
            params: {
                query: [
                    {
                        name: "status",
                        value: "available"
                    }
                ]
            },
            expected: {
                status: 200
            },
            authentication: undefined
        }
    ]
}

const validOpenApiType: OpenAPIV3.Document = {
    openapi: "3.0.0",
    info: {
        title: "Swagger Petstore",
        version: "1.0.0"
    },
    servers: [
        { url: "name", description: "description" }
    ],
    paths: {}
}

describe('testing file opening', () => {
    test('file that does not exist should throw error', () => {
        jest.spyOn(fs, 'existsSync').mockReturnValue(false);
        expect(() => getOpenApiTestFile("examples/nofound.json")).toThrow();
    });
    test('file that does not contains tests as array should throw error', () => {
        jest.spyOn(fs, 'existsSync').mockReturnValue(true);
        jest.spyOn(fs, 'readFileSync').mockReturnValue('{"tests": {}}');
        expect(() => getOpenApiTestFile("examples/tests-is-not-an-array.opentest.json")).toThrow();
    });
    test('file that is not a JSON should throw error', () => {
        jest.spyOn(fs, 'existsSync').mockReturnValue(true);
        jest.spyOn(fs, 'readFileSync').mockReturnValue('{ test }');
        expect(() => getOpenApiTestFile("examples/invalid-json-file.json")).toThrow();
    });
    test('valid file should return test case', () => {
        // Mock fs.readFileSync to return valid JSON content
        const validJson: string = JSON.stringify(validTestFileType);
        jest.spyOn(fs, 'existsSync').mockReturnValue(true);
        jest.spyOn(fs, 'readFileSync').mockReturnValue(validJson);

        const result: TestFileType = getOpenApiTestFile("examples/valid.json");
        const test: any = validTestFileType.tests[0];

        // Check that the result is an object with a valid structure
        expect(result).toBeDefined();
        expect(result.tests).toBeInstanceOf(Array);
        expect(result.tests[0]).toHaveProperty('name', test.name);
        expect(result.tests[0]).toHaveProperty('description', test.description);
        expect(result.tests[0]).toHaveProperty('path', test.path);
        expect(result.tests[0]).toHaveProperty('method', test.method);
        expect(result.tests[0].params.query[0]).toHaveProperty('name', test.params.query[0].name);
        expect(result.tests[0].params.query[0]).toHaveProperty('value', test.params.query[0].value);
        expect(result.tests[0].expected).toHaveProperty('status', test.expected.status);
    });
});

describe('testing openapi file opening', () => {
    test('file that does not exist should throw error', () => {
        jest.spyOn(fs, 'existsSync').mockReturnValue(false);
        expect(() => getOpenApiFile("examples/nofound.yaml")).toThrow();
    });
    test('valid file should return OpenApi Type', () => {
        // Mock fs.readFileSync to return valid JSON content
        const validJson: string = JSON.stringify(validOpenApiType);

        jest.spyOn(fs, 'existsSync').mockReturnValue(true);
        jest.spyOn(fs, 'readFileSync').mockReturnValue(validJson);

        const result: OpenAPIV3.Document = getOpenApiFile("examples/valid.json");

        // Check that the result is an object with a valid structure
        expect(result).toBeDefined();
        expect(result.servers).toBeInstanceOf(Array);
        expect(result.servers![0]).toHaveProperty('url', validOpenApiType.servers![0].url);
        expect(result.servers![0]).toHaveProperty('description', validOpenApiType.servers![0].description);
    });
});

