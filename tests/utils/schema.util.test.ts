import {validateSchema} from '../../src/utils/schema.util';
import {TestFileType} from "../../src/types/testFile.type";

const validTestFileType: TestFileType = {
    tests: [
        {
            name: "find by available pets",
            description: "Should return all available pets",
            path: "/pet/findByStatus",
            method: "GET",
            params: {
                query: [
                    {
                        name: "status",
                        value: "available"
                    }
                ]
            },
            expected: {
                status: 200
            }
        }
    ]
}
const invalidTestFileType: TestFileType = {
    tests: [
        {
            name: "find by available pets",
            description: "Should return all available pets",
            path: "findByStatus",
            method: "GET",
            params: {
                query: [
                    {
                        name: "status",
                        value: "available"
                    }
                ]
            },
            expected: {
                status: 200
            }
        }
    ]
}
describe('testing schema validation', () => {
    test('valid test object should return success', () => {
        expect(validateSchema(validTestFileType)).toStrictEqual({"errors": null, "success": true});
    });
    test('invalid path test object should return error', () => {
        expect(validateSchema(invalidTestFileType)).toStrictEqual({
            "errors": [
                {
                    "instancePath": "/tests/0/path",
                    "keyword": "pattern",
                    "message": "must match pattern \"^/.*$\"",
                    "params": {
                        "pattern": "^/.*$",
                    },
                    "schemaPath": "#/properties/tests/items/properties/path/pattern",
                },
            ], "success": false
        })
        ;
    });
});
