import https from 'https';
import { ApiRequestHandler } from '../../src/handlers/apiRequest.handler';
import { TestCaseType } from '../../src/types/testCase.type';
import { TestFileType } from "../../src/types/testFile.type";
import * as authenticationUtil from '../../src/utils/authentication.util';

jest.mock('https');
jest.mock('../../src/utils/authentication.util');

describe('ApiRequestHandler', () => {
    const mockSpec = {
        servers: [{ url: 'https://api.example.com/v1' }]
    };

    const handler = new ApiRequestHandler(mockSpec);

    describe('buildOptions', () => {
        it('should build correct options for a simple GET request', async () => {
            const test: TestCaseType = {
                name: 'Get Users',
                description: 'Retrieve a list of users',
                path: '/users',
                method: 'GET',
                params: { query: [] },
                headers: [{ name: 'Accept', value: 'application/json' }],
                expected: { status: 200 }
            };
            const testFileSettings: TestFileType = { tests: [test] };

            const options = await handler.buildOptions(test, testFileSettings);

            expect(options).toEqual({
                host: 'api.example.com',
                port: 443,
                path: '/v1/users',
                method: 'GET',
                headers: { 'Accept': 'application/json' }
            });
        });

        it('should handle query parameters correctly', async () => {
            const test: TestCaseType = {
                name: 'Get Users with Pagination',
                description: 'Retrieve a paginated list of users',
                path: '/users',
                method: 'GET',
                params: { query: [{ name: 'page', value: '1' }, { name: 'limit', value: '10' }] },
                headers: [],
                expected: { status: 200 }
            };
            const testFileSettings: TestFileType = { tests: [test] };

            const options = await handler.buildOptions(test, testFileSettings);

            expect(options.path).toBe('/v1/users?page=1&limit=10');
        });

        it('should include authentication headers when provided in test case', async () => {
            const test: TestCaseType = {
                name: 'Get Authenticated User',
                description: 'Retrieve the current user\'s information',
                path: '/user',
                method: 'GET',
                params: { query: [] },
                headers: [],
                expected: { status: 200 },
                authentication: { type: 'bearer', value: { raw: 'test-token' } }
            };
            const testFileSettings: TestFileType = { tests: [test] };

            (authenticationUtil.processAuthenticationHeader as jest.Mock).mockResolvedValue({ 'Authorization': 'Bearer test-token' });

            const options = await handler.buildOptions(test, testFileSettings);

            expect(options.headers).toEqual({ 'Authorization': 'Bearer test-token' });
        });

        it('should use test file authentication when not provided in test case', async () => {
            const test: TestCaseType = {
                name: 'Get User Profile',
                description: 'Retrieve a user\'s profile',
                path: '/users/1',
                method: 'GET',
                params: { query: [] },
                headers: [],
                expected: { status: 200 }
            };
            const testFileSettings: TestFileType = {
                tests: [test],
                authentication: { type: 'bearer', value: { raw: 'file-token' } }
            };

            (authenticationUtil.processAuthenticationHeader as jest.Mock).mockResolvedValue({ 'Authorization': 'Bearer file-token' });

            const options = await handler.buildOptions(test, testFileSettings);

            expect(options.headers).toEqual({ 'Authorization': 'Bearer file-token' });
        });
    });

    describe('sendRequest', () => {
        it('should send a GET request and return the response', async () => {
            const mockResponse = {
                on: jest.fn().mockImplementation((event, callback) => {
                    if (event === 'data') callback('{"key": "value"}');
                    if (event === 'end') callback();
                })
            };

            (https.request as jest.Mock).mockImplementation((options, callback) => {
                callback(mockResponse);
                return {
                    on: jest.fn(),
                    end: jest.fn()
                };
            });

            const options = {
                method: 'GET',
                host: 'api.example.com',
                path: '/users'
            };

            const result = await handler.sendRequest(options);

            expect(result).toEqual({
                data: mockResponse,
                body: '{"key": "value"}'
            });
        });

        it('should send a POST request with body', async () => {
            const mockResponse = {
                on: jest.fn().mockImplementation((event, callback) => {
                    if (event === 'data') callback('{"status": "success"}');
                    if (event === 'end') callback();
                })
            };

            const mockRequest = {
                on: jest.fn(),
                write: jest.fn(),
                end: jest.fn()
            };

            (https.request as jest.Mock).mockImplementation((options, callback) => {
                callback(mockResponse);
                return mockRequest;
            });

            const options = {
                method: 'POST',
                host: 'api.example.com',
                path: '/users'
            };

            const body = JSON.stringify({ name: 'John Doe' });

            await handler.sendRequest(options, body);

            expect(mockRequest.write).toHaveBeenCalledWith(body);
            expect(mockRequest.end).toHaveBeenCalled();
        });

        it('should handle request errors', async () => {
            const mockError = new Error('Network error');

            (https.request as jest.Mock).mockImplementation(() => {
                return {
                    on: (event: string, callback: (error: Error) => void) => {
                        if (event === 'error') callback(mockError);
                    },
                    end: jest.fn()
                };
            });

            const options = {
                method: 'GET',
                host: 'api.example.com',
                path: '/users'
            };

            await expect(handler.sendRequest(options)).rejects.toThrow('Network error');
        });
    });
});