import { createObjectCsvWriter } from "csv-writer";
import fs from "fs";
import { TestCaseType } from '../types/testCase.type';

interface TestResult {
    expectedStatusCode: boolean;
    expectedBody: boolean;
    data: TestCaseType;
}

interface TestResponse {
    passed: boolean;
    errors: any[];
    data: TestCaseType;
}

export class TestOutputHandler {
    private static createCsvHeader() {
        return [
            { id: 'name', title: 'Name' },
            { id: 'description', title: 'Description' },
            { id: 'path', title: 'Path' },
            { id: 'method', title: 'Method' },
            { id: 'params', title: 'Params' },
            { id: 'body', title: 'Body' },
            { id: 'expected', title: 'Expected' },
            { id: 'response_status_code', title: 'Response Status Code' },
            { id: 'response_body', title: 'Response Body' }
        ];
    }

    private static formatTestForCsv(test: TestResult) {
        return {
            name: test.data.name,
            description: test.data.description,
            path: test.data.path,
            method: test.data.method,
            params: JSON.stringify(test.data.params),
            body: JSON.stringify(test.data.body),
            expected: JSON.stringify(test.data.expected),
            response_status_code: test.expectedStatusCode,
            response_body: test.expectedBody
        };
    }

    private static formatResponseForJson(response: TestResponse) {
        return {
            name: response.data.name,
            description: response.data.description,
            errors: response.errors
        };
    }

    async saveToCsv(filePath: string, tests: TestResult[]): Promise<void> {
        const csvWriter = createObjectCsvWriter({
            path: filePath,
            encoding: 'utf8',
            header: TestOutputHandler.createCsvHeader()
        });

        const records = tests.map(TestOutputHandler.formatTestForCsv);

        await csvWriter.writeRecords(records);
    }

    saveToJson(filePath: string, responses: TestResponse[]): void {
        const data = responses.map(TestOutputHandler.formatResponseForJson);
        const json = JSON.stringify(data, null, 2);
        fs.writeFileSync(filePath, json);
    }
}