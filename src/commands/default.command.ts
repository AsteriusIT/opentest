import https, {RequestOptions} from 'https';
import {TestCaseType} from '../types/testCase.type';
import {getOpenApiFile, getOpenApiTestFile} from '../utils/files.util';
import {OpenapiType} from "../types/openapi.type";
import {TestFileType} from "../types/testFile.type";
import {validateCommandFunc} from "./validate.command";

function logTest(test: TestCaseType): void {
    console.log("=====================================");
    console.log("Running test: ", test.name);
    console.log("Description: ", test.description);
    console.log("Path: ", test.path);
    console.log("Method: ", test.method);
    console.log("Params: ", test.params);
    console.log("Expected: ", test.expected);
}

function buildOptions(spec: OpenapiType, test: TestCaseType): RequestOptions {
    const server: string = spec.servers[0].url.replace("https://", "");
    const urlPart: string[] = server.split("/");
    const suffix = urlPart.length > 1 ? urlPart.slice(1).join("/") : "";

    let path = suffix ? `/${suffix}${test.path}` : test.path;

    if (test.params.query) {
        const query = test.params.query
            .map(({name, value}) => `${name}=${encodeURIComponent(value)}`)
            .join("&");
        path += `?${query}`;
    }

    return {
        host: urlPart[0],
        port: 443,
        path: path,
        method: test.method,
    } as RequestOptions;
}

function sendRequest(options: RequestOptions, test: TestCaseType): void {
    https.request(options, (res) => {
        res.on('data', () => {});
        res.on("end", () => {
            const statusCode: number | undefined = res.statusCode;

            if (statusCode !== test.expected.status) {
                console.error("Status code does not match. Expected: ", test.expected.status, " Got: ", statusCode);
                process.exit(1);
            } else {
                console.log("Status code match: ", statusCode);
            }
        });
    }).end();
}

export const defaultCommandHandler = (options: { input: string, spec: string }) => {
    try {
        const spec: OpenapiType = getOpenApiFile(options.spec);
        const tests: TestFileType = getOpenApiTestFile(options.input)

        if (!spec || !tests) {
            process.exit(1);
        }

        validateCommandFunc(options.input);

        const testsCases = tests.tests;

        // Run tests
        testsCases.forEach((test: TestCaseType, index: number) => {
            logTest(test);

            const options: RequestOptions = buildOptions(spec, test);

            console.log(options);

            sendRequest(options, test);
        });
    } catch (error: unknown) {
        if (error instanceof Error) {
            console.error(`Error while reading or parsing file: ${error.message}`);
            process.exit(1);
        }
    }

};
