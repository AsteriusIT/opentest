import { OpenAPIV3 } from 'openapi-types';
import { TestFileType } from "../types/testFile.type";
import { getOpenApiFile, getOpenApiTestFile } from '../utils/files.util';
import { ConsoleLogger, ILogger, JsonLogger } from '../utils/logger.util';
import { validateCommandFunc } from "./validate.command";
import { TestRunner } from '../handlers/testRunner.handler';

export async function defaultCommandHandler(options: { input: string, spec: string, output: string | undefined, format?: 'console' | 'json' }) {
    try {
        const spec: OpenAPIV3.Document = getOpenApiFile(options.spec);
        const tests: TestFileType = getOpenApiTestFile(options.input);

        if (!spec || !tests) {
            console.error('Failed to load spec or tests');
            process.exit(1);
        }

        validateCommandFunc(options.input);

        const logger: ILogger = options.format === 'json' ? new JsonLogger() : new ConsoleLogger();
        const testRunner = new TestRunner(spec, tests, logger);

        const responses = await testRunner.runTests();

        if (options.output) {
            logger.saveResponses(options.output, responses);
        }
    } catch (error: unknown) {
        if (error instanceof Error) {
            console.error(`Error while reading or parsing file: ${error.message}`);
            process.exit(1);
        }
    }
}
