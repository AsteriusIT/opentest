import https, {RequestOptions} from 'https';
import {TestCaseType} from '../types/testCase.type';
import {getOpenApiFile, getOpenApiTestFile} from '../utils/files.util';
import {OpenapiType} from "../types/openapi.type";
import {TestFileType} from "../types/testFile.type";
import {validateCommandFunc} from "./validate.command";

export const defaultCommandHandler = (options: { input: string, spec: string }) => {
    const specFilePath: string = options.spec;
    const testsFilePath: string = options.input;

    try {
        // Parse openapi schema (yaml)
        const spec: OpenapiType = getOpenApiFile(specFilePath);

        // Parse test cases (json)
        const tests: TestFileType = getOpenApiTestFile(testsFilePath)

        if (!spec || !tests) {
            process.exit(1);
        }

        // Validate test cases against schema
        validateCommandFunc(testsFilePath);

        const testsCases = tests.tests;

        // Run tests
        testsCases.forEach((test: TestCaseType, index: number) => {
            console.log("=====================================");
            console.log("Running test: ", test.name);
            console.log("Description: ", test.description);
            console.log("Path: ", test.path);
            console.log("Method: ", test.method);
            console.log("Params: ", test.params);
            console.log("Expected: ", test.expected);

            const server: string = spec.servers[0].url.replace("https://", "");
            const urlPart: string[] = server.split("/");
            const host: string = urlPart[0];
            let suffix = "";

            if (urlPart.length > 1) {
                suffix = urlPart.slice(1).join("/");
            }

            let path: string = suffix === "" ? test.path : `/${suffix}${test.path}`;

            if (test.params.query) {
                path += "?";
                const query: { name: string, value: string }[] = test.params.query;

                query.forEach((queryContent: { name: string, value: string }, index: number) => {
                    path += `${queryContent.name}=${queryContent.value}`;

                    if (index !== query.length - 1) {
                        path += "&";
                    }
                });
            }

            const options: RequestOptions = {
                host: host,
                port: 443,
                path: path,
                method: test.method,
            };

            console.log("Options: ", options);


            // Make request
            https.request(options, (res) => {
                res.on("end", () => {

                    // Check status code
                    const statusCode: number | undefined = res.statusCode;

                    if (statusCode !== test.expected.status) {
                        console.error("Status code does not match. Expected: ", test.expected.status, " Got: ", statusCode);
                        process.exit(1);
                    } else {
                        console.log("Status code match: ", statusCode);
                    }
                });
            }).end();


            if (index === testsCases.length - 1) {
                console.log("=====================================");
            }
        });
    } catch (error: unknown) {
        if (error instanceof Error) {
            console.error(`Error while reading or parsing file: ${error.message}`);
            process.exit(1);
        }
    }

};
